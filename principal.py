# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tela.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QHeaderView,QTableWidgetItem,QMessageBox
from PyQt5.QtGui import QKeySequence
from datetime import datetime
from collections import Counter
import serial
from fluxo import Ui_Dialog
import time
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import win32print
import requests





class Ui_MainWindow(object):

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 700)
        

      

        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.telaprodutos = QtWidgets.QTableWidget(self.centralwidget)
        self.telaprodutos.setGeometry(QtCore.QRect(20, 210, 671, 471))
        self.telaprodutos.setObjectName("telaprodutos")
        self.telaprodutos.setColumnCount(0)
        self.telaprodutos.setRowCount(0)
        self.produto = QtWidgets.QLineEdit(self.centralwidget)
        self.produto.setGeometry(QtCore.QRect(80, 30, 471, 22))
        self.produto.setText("")
        self.produto.setObjectName("produto")
        #
        self.produto.returnPressed.connect(self.enviarParaTelaProdutos1)
        #
      
        self.produto.textChanged.connect(self.filterData)
        self.codigo = QtWidgets.QLineEdit(self.centralwidget)
        self.codigo.setGeometry(QtCore.QRect(20, 30, 51, 22))
        self.codigo.setObjectName("codigo")
        self.codigo.textChanged.connect(self.codigofilter)
        #
        self.codigo.returnPressed.connect(self.enviarParaTelaProdutos)
        #
        self.quantidade = QtWidgets.QLineEdit(self.centralwidget)
        self.quantidade.setGeometry(QtCore.QRect(560, 30, 31, 22))
        self.quantidade.setObjectName("quantidade")
        self.quantidade.returnPressed.connect(self.enviarParaTelaProdutos1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 0, 49, 16))
        self.label.setObjectName("label")
        self.total = QtWidgets.QLCDNumber(self.centralwidget)
        self.total.setDigitCount(9)
        self.total.setGeometry(QtCore.QRect(770, 250, 231, 41))
        self.total.setObjectName("total")
        
        
        
        self.pix = QtWidgets.QLCDNumber(self.centralwidget)
        self.pix.setDigitCount(9)
        self.pix.setGeometry(QtCore.QRect(770, 290, 231, 41))
        self.pix.setObjectName("pix")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(690, 220, 81, 91))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(38)
        font.setBold(True)
        font1 = QtGui.QFont()
        font1.setPointSize(30)
        font1.setBold(True)
        font3 = QtGui.QFont()
        font3.setPointSize(13)
        font3.setBold(True)
        font4 = QtGui.QFont()
        font4.setPointSize(5)
        font4.setBold(True)
        font5 = QtGui.QFont()
        app.aboutToQuit.connect(self.upload)

        font5.setPointSize(12)
        font5.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setTextFormat(QtCore.Qt.AutoText)
        self.label_2.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_2.setObjectName("label_2")
        font.setPointSize(20)
        self.label_2.setFont(font)
        #Cartao
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(690, 350, 240, 91))
        self.label_3.setFont(font4)


        self.label_2x = QtWidgets.QLabel(self.centralwidget)
        self.label_2x.setGeometry(QtCore.QRect(690, 310, 81, 91))
        self.label_2x.setSizePolicy(sizePolicy)
        self.label_2x.setMinimumSize(QtCore.QSize(0, 0))
       
        self.download()
       
       
        self.label_2x.setFont(font3)
        self.label_2x.setTextFormat(QtCore.Qt.AutoText)
        self.label_2x.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_2x.setObjectName("label_2")      
        self.label_2xx = QtWidgets.QLabel(self.centralwidget)
        self.label_2xx.setGeometry(QtCore.QRect(690, 260, 81, 91))
        self.label_2xx.setSizePolicy(sizePolicy)
        self.label_2xx.setMinimumSize(QtCore.QSize(0, 0))
        
        self.label_2xx.setFont(font)
        self.label_2xx.setTextFormat(QtCore.Qt.AutoText)
        self.label_2xx.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_2xx.setObjectName("label_2xx")        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(38)
        font.setBold(True)
        self.label_3.setFont(font3)
        self.label_3.setTextFormat(QtCore.Qt.AutoText)
        self.label_3.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_3.setObjectName("label_3")
        self.pago = QtWidgets.QLCDNumber(self.centralwidget)
        self.pago.setGeometry(QtCore.QRect(770, 370, 231, 41))
        self.pago.setDigitCount(9)
        self.pago.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.pago.setAcceptDrops(False)
        self.pago.setInputMethodHints(QtCore.Qt.ImhNone)
        self.pago.setFrameShape(QtWidgets.QFrame.Box)
        self.pago.setObjectName("pago")
        self.pago1 = QtWidgets.QLCDNumber(self.centralwidget)
        self.pago1.setGeometry(QtCore.QRect(770, 330, 231, 41))
        self.pago1.setDigitCount(9)
        self.pago1.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.pago1.setAcceptDrops(False)
        self.pago1.setInputMethodHints(QtCore.Qt.ImhNone)
        self.pago1.setFrameShape(QtWidgets.QFrame.Box)
        self.pago1.setObjectName("Dinheiro:")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(690, 390, 81, 91))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(38)
        font.setBold(True)
        self.label_4.setFont(font3)
        self.label_4.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_4.setInputMethodHints(QtCore.Qt.ImhHiddenText|QtCore.Qt.ImhNoPredictiveText)
        self.label_4.setTextFormat(QtCore.Qt.AutoText)
        self.label_4.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_4.setObjectName("label_4")
        self.troco = QtWidgets.QLCDNumber(self.centralwidget)
        self.troco.setGeometry(QtCore.QRect(770, 410, 231, 41))
        self.troco.setObjectName("troco")
        self.troco.setDigitCount(9)
        self.pagoLinha = QtWidgets.QLineEdit(self.centralwidget)
        self.pagoLinha.setGeometry(QtCore.QRect(772, 390, 21, 20))
        self.pagoLinha.setEchoMode(QtWidgets.QLineEdit.NoEcho)
        self.pagoLinha.setObjectName("pagoLin")      
        self.pagoLinhax = QtWidgets.QLineEdit(self.centralwidget)
        self.pagoLinhax.setGeometry(QtCore.QRect(772, 310, 21, 20))
        self.pagoLinhax.setEchoMode(QtWidgets.QLineEdit.NoEcho)
        self.pagoLinhax.setObjectName("pagoLinha2")
        self.pagoLinha1 = QtWidgets.QLineEdit(self.centralwidget)
        self.pagoLinha1.setGeometry(QtCore.QRect(772, 350, 21, 20))
        self.pagoLinha1.setEchoMode(QtWidgets.QLineEdit.NoEcho)
        self.pagoLinha1.setObjectName("pagoLinha1")
        self.pesquisaitens = QtWidgets.QTableWidget(self.centralwidget)
        self.pesquisaitens.setGeometry(QtCore.QRect(80, 50, 471, 151))
        self.pesquisaitens.setObjectName("pesquisaitens")
        self.pesquisaitens.setColumnCount(0)
        self.pesquisaitens.setRowCount(0)
        self.telaprodutos.itemSelectionChanged.connect(self.excluir_linha_selecionada)
        self.pesquisaitens.itemClicked.connect(self.adicionar_item_secundaria)
        self.finalizarvenda = QtWidgets.QPushButton(self.centralwidget)
        self.finalizarvenda.setGeometry(QtCore.QRect(700, 650, 130, 24))
        self.finalizarvenda.setObjectName("finalizarvenda")
        self.finalizarvenda.pressed.connect(self.finalizando_vendas)
        self.fluxo = QtWidgets.QPushButton(self.centralwidget)
        self.fluxo.setGeometry(QtCore.QRect(600, 30, 81, 24))
        self.fluxo.setObjectName("Fluxo")
        self.fluxo.clicked.connect(self.caixa)
        self.cancelarvenda = QtWidgets.QPushButton(self.centralwidget)
        self.cancelarvenda.setGeometry(QtCore.QRect(850, 650, 130, 24))
        self.cancelarvenda.setObjectName("cancelarvenda")
        self.cancelarvenda.pressed.connect(self.cancelar_venda)
        self.vendasdia = QtWidgets.QTableWidget(self.centralwidget)
        self.vendasdia.setGeometry(QtCore.QRect(700, 30, 291, 192))
        self.vendasdia.setObjectName("vendasdia")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(780, 0, 241, 31))
        self.label_5.setObjectName("label_5")
        self.totaldia = QtWidgets.QLCDNumber(self.centralwidget)
        self.totaldia.setDigitCount(9)
        self.totaldia.setGeometry(QtCore.QRect(860, 220, 141, 31))  
        self.totaldia.setObjectName("totaldia")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(810, 220, 49, 51))
        self.label_6.setObjectName("label_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1243, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        total = 0
        self.retranslateUi(MainWindow)
        self.pagoLinha.textChanged['QString'].connect(self.pago.display) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pagoLinha.textChanged.connect(self.enviarParaTelaProdutos1)
        self.pagoLinha1.textChanged['QString'].connect(self.pago1.display) # type: ignore
        self.card1 = 0
        self.pago = 0
        self.loadData()
        total_str = ''
        self.vendas_dia()
        self.total_lcd()
        self.pagoLinha.textChanged.connect(self.enviarParaTelaProdutos1)
        self.pagoLinha1.textChanged.connect(self.enviarParaTelaProdutos1)
        self.pagoLinhax.textChanged.connect(self.pix.display)
        self.pagoLinhax.textChanged.connect(self.enviarParaTelaProdutos1)
        valor_cartao = self.pagoLinha.text()
        valor_dinheiro = self.pagoLinha1.text()
        self.codigo.setFocus()
        self.caixa1()

    soma = 0
    total = 0
    pago= 0
    
  def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ponto de Vendas"))
        self.produto.setPlaceholderText(_translate("MainWindow", "Produtos"))
        self.codigo.setPlaceholderText(_translate("MainWindow", "Codigo"))
        self.quantidade.setPlaceholderText(_translate("MainWindow", "Qtd."))
        #self.valor.setPlaceholderText(_translate("MainWindow", "Valor"))
        self.label.setText(_translate("MainWindow", "Codigo"))
        self.label_2.setText(_translate("MainWindow", "Total:"))
        self.label_2x.setText(_translate("MainWindow", "Dinheiro:"))
        self.label_2xx.setText(_translate("MainWindow", "Pix:"))


        self.label_3.setText(_translate("MainWindow", "Cartão:"))
        self.label_4.setText(_translate("MainWindow", "Troco:"))
        self.finalizarvenda.setText(_translate("MainWindow", "Finalizar Venda"))
        self.fluxo.setText(_translate("MainWindow", "Fluxo"))

        self.cancelarvenda.setText(_translate("MainWindow", "Cancelar Venda"))
        self.label_5.setText(_translate("MainWindow", "Vendas do dia:"))
        self.label_6.setText(_translate("MainWindow", "Total dia:"))
    
         #Cria tabela com fluxo do caixa do dio 
    def caixa1 (self):
        datedia1 = datetime.today().strftime("%d%m%Y")  
        # Adicione um prefixo ao nome da tabela
        nome_tabela1 = f"dia_{datedia1}".replace('.', '_')
        # Verifique se a tabela já existe
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (nome_tabela1,))
        tabela_existente = cursor.fetchone() is not None
        conn.close() 
        if not tabela_existente:
            # Se a tabela não existir, crie-a
            conn = sqlite3.connect("vendas.db")
            cursor = conn.cursor()
            
            cursor.execute(f'''CREATE TABLE {nome_tabela1} (
                                Hora TEXT,
                                Descr Entrada TEXT,
                                Entrada REAL,
                                Desc Saida REAL,
                                Saida REAL,
                                Total REAL
                            )''')
            

            conn.commit()
            conn.close()
        
        

    
    
    def caixa(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.window)  
        self.window.show() 
    
    def excluir_linha_selecionada(self): #Remove produto da lista de vendas
        selected_rows = self.telaprodutos.selectedItems()
        if selected_rows:
            # Obtenha a linha  selecionada
            row = selected_rows[0].row()
            # Remova a linha da tabela

        
    def pesquisa_venda(self):
# Limpe a tabela de resultados
        self.pesquisaitens.setRowCount(0)
        texto = self.produto.text()
        self.conn = sqlite3.connect('produtos.db')
        self.cursor = self.conn.cursor()

        query = f"SELECT nome, preco FROM produtos WHERE nome LIKE '%{texto}%'"
        self.cursor.execute(query)
        results = self.cursor.fetchall()

        for row_num, row_data in enumerate(results):
            self.pesquisaitens.insertRow(row_num)
            for col_num, col_data in enumerate(row_data):
                item = QTableWidgetItem(str(col_data))
                self.pesquisaitens.setItem(row_num, col_num, item)

    def loadData(self):
        connection = sqlite3.connect('vendas.db')
        cursor = connection.cursor()


        cursor.execute("SELECT * FROM Produtos")
        dados = cursor.fetchall()
        connection.close()
        self.pesquisaitens.setRowCount(0)

        num_linhas = len(dados)
        if num_linhas > 0:
            num_colunas = len(dados[0])
            self.pesquisaitens.setRowCount(num_linhas)
            self.pesquisaitens.setColumnCount(num_colunas)

            # Preencha a tabela com os dados
            for linha_idx, linha in enumerate(dados):
                for coluna_idx, valor in enumerate(linha):
                    item = QTableWidgetItem(str(valor))
                    self.pesquisaitens.setItem(linha_idx, coluna_idx, item)
                    self.pesquisaitens.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)

                    self.pesquisaitens.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
                    self.pesquisaitens.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
 
                    self.pesquisaitens.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents)

            # Defina os nomes das colunas
            colunas = [str(coluna[0]) for coluna in cursor.description]
            self.pesquisaitens.setHorizontalHeaderLabels(colunas)
            

    def filterData(self):
        texto_pesquisa = self.produto.text().lower()

        for row in range(self.pesquisaitens.rowCount()):
            item = self.pesquisaitens.item(row, 1)
            if item is not None:
                texto_item = item.text().lower()
                if texto_pesquisa in texto_item:
                    self.pesquisaitens.setRowHidden(row, False)
                else:
                    self.pesquisaitens.setRowHidden(row, True)

    def codigofilter(self):
        texto_pesquisa = self.codigo.text().lower()

        for row in range(self.pesquisaitens.rowCount()):
            item = self.pesquisaitens.item(row, 0)
            if item is not None:
                texto_item = item.text().lower()
                if texto_pesquisa in texto_item:
                    self.pesquisaitens.setRowHidden(row, False)
                else:
                    self.pesquisaitens.setRowHidden(row, True)

    
    def download(self): # baiaxa o banco de dados do servidor
        url = 'https://allldo.pythonanywhere.com/download?v=1'  
        nome_arquivo_local = 'vendas.db'  
        # Cabeçalhos para desabilitar o cache
        headers = {'Cache-Control': 'no-cache'}

        
        response = requests.get(url, headers=headers)

        # Verifique se a solicitação foi bem-sucedida (código de status HTTP 200)
        if response.status_code == 200:
            with open(nome_arquivo_local, 'wb') as f:
                f.write(response.content)
            print(f"Banco de dados baixado com sucesso de {url} como {nome_arquivo_local}")  # Adicione este print
        else:
            print("Erro ao baixar o banco de dados:", response.status_code)

    
    def enviarParaTelaProdutos(self):
        codigo = self.codigo.text()
        quantidade_texto = self.quantidade.text()
        if codigo == '':
            print('nada')
        elif codigo and (quantidade_texto.isdigit() or not quantidade_texto.strip()):
            quantidade = int(quantidade_texto) if quantidade_texto.isdigit() else 1
            for row in range(self.pesquisaitens.rowCount()):
                item = self.pesquisaitens.item(row, 0)  # Coluna "Produto"
                if item is not None and codigo in item.text().lower():
                    for _ in range(quantidade):
                        row_position = self.telaprodutos.rowCount()
                        self.telaprodutos.setColumnCount(3)  # Defina o número de colunas
                        self.telaprodutos.insertRow(row_position)
                        self.telaprodutos.setHorizontalHeaderLabels(["Código", "Produto", "Valor"])
                        for col in range(3): 
                            if col == 2:  
                                valor_item = self.pesquisaitens.item(row, 3)
                                if valor_item is not None:
                                    valor_text = valor_item.text()
                                    item = QTableWidgetItem(valor_text)
                                else:
                                    item = QTableWidgetItem("")
                            else:
                                item = QTableWidgetItem(self.pesquisaitens.item(row, col).text())
                            self.telaprodutos.setItem(row_position, col, item)
                    break
            self.telaprodutos.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

            total = 0
        for row in range(self.telaprodutos.rowCount()):
            item = self.telaprodutos.item(row, 2) 
            if item is not None:
                valor_texto = item.text()
                try:
                    valor = float(valor_texto)
                    total += valor
                except ValueError:
                    pass  # Ignora valores que não podem ser convertidos para float

        # Formata o valor total com um ponto decimal
            total_formatado = "{:.2f}".format(total)  # Exibe dois dígitos após o ponto decimal     
            self.total.display(total_formatado)

        self.codigo.clear()
        self.produto.clear()
        self.quantidade.clear()

    def enviarParaTelaProdutos1(self):
            produto_texto = self.produto.text().lower()
            quantidade_texto = self.quantidade.text()
            if produto_texto and (quantidade_texto.isdigit() or not quantidade_texto.strip()):
                quantidade = int(quantidade_texto) if quantidade_texto.isdigit() else 1

                for row in range(self.pesquisaitens.rowCount()):
                    item = self.pesquisaitens.item(row, 1)  # Coluna "Produto"
                    if item is not None and produto_texto in item.text().lower():
                        for _ in range(quantidade):
                            # Encontrou um item cujo texto contém o texto inserido, adicione-o à tabela de produtos
                            row_position = self.telaprodutos.rowCount()
                            self.telaprodutos.setColumnCount(3)  
                            self.telaprodutos.insertRow(row_position)
                            self.telaprodutos.setHorizontalHeaderLabels(["Código", "Produto", "Valor", "Quantidade"]) 
                            for col in range(3):  
                                if col == 2:  # Verifique se é a coluna de valor
                                    valor_item = self.pesquisaitens.item(row, 3)
                                    if valor_item is not None:
                                        valor_text = valor_item.text()
                                        item = QTableWidgetItem(valor_text)
                                    else:
                                        item = QTableWidgetItem("") 
                                else:
                                    item = QTableWidgetItem(self.pesquisaitens.item(row, col).text())
                                self.telaprodutos.setItem(row_position, col, item)
                        break
       
            self.codigo.clear()
            self.produto.clear()
            self.quantidade.clear()
  
           
            total = 0
            for row in range(self.telaprodutos.rowCount()):
                item = self.telaprodutos.item(row, 2)  
                if item is not None:
                    valor_texto = item.text()
                    try:
                        valor = float(valor_texto)
                        total += valor
                    except ValueError:
                        pass  # Ignora valores que não podem ser convertidos para float

            # Formata o valor total com um ponto decimal
            total_formatado = "{:.2f}".format(total)  
            self.total.display(total_formatado)
            print(total)  
            pago = self.pagoLinha.text()
            card = self.pago1.value()
            #while True:  
            try:
                qlinha1_valor = float(self.pagoLinha.text()) if self.pagoLinha.text() else 0.0
                qlinha2_valor = float(self.pagoLinha1.text()) if self.pagoLinha1.text() else 0.0
                qlinha3_valor =float(self.pagoLinhax.text()) if self.pagoLinhax.text() else 0.0
                total_valor = float(self.total.value()) if self.total.value() else 0.0
                #Calcula o troco
                troco_valor = qlinha3_valor + qlinha1_valor + qlinha2_valor - total_valor
                self.troco.display(troco_valor)
            except ValueError:
                print("Erro: Os valores inseridos não são válidos.")

            self.codigo.clear()

            
            
        
        
    
    def finalizando_vendas(self):
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        data = datetime.now().strftime("%H:%M:%S")
        soma = 0.0
        datedia = datetime.today().strftime("%d%m%Y")  # Por exemplo, "20231011" para 11 de outubro de 2023

        # Adicione um prefixo ao nome da tabela
        nome_tabela = f"vendas_{datedia}"

        # Verifique se a tabela já existe
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (nome_tabela,))
        tabela_existente = cursor.fetchone() is not None
        conn.close()  # Feche a conexão

        if not tabela_existente:
            # Se a tabela não existir, crie-a
            conn = sqlite3.connect("vendas.db")
            cursor = conn.cursor()
            
            cursor.execute(f'''CREATE TABLE {nome_tabela} (
                                Hora TEXT,
                                Produto TEXT,
                                Valor REAL,
                                Cartao REAL,
                                Pix REAL,
                                Dinheiro REAL,
                                Total REAL
                            )''')
            
            
            # Commit para salvar as alterações e fechar a conexão
            conn.commit()
            conn.close()
        
        connection = sqlite3.connect('vendas.db')
        cursor = connection.cursor()

        # Crie um dicionário com a contagem de cada produto no QTableWidget
        product_count = Counter(self.telaprodutos.item(row, 1).text() for row in range(self.telaprodutos.rowCount()))

        for row in range(self.telaprodutos.rowCount()):
            connection = sqlite3.connect('vendas.db')
            cursor = connection.cursor()
            product_name = self.telaprodutos.item(row, 1).text()  # Obtém o nome do produto

            # Atualize a tabela de produtos no banco de dados subtraindo 1 da coluna "Quantidade"
            update_query = "UPDATE produtos SET Quantidade = Quantidade - 1 WHERE Produto = ?"
            cursor.execute(update_query, (product_name,))

            # Commit das alterações no banco de dados a cada atualização
            connection.commit()

    # Feche a conexão com o banco de dados
            connection.close()


        
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        data = datetime.now().strftime("%H:%M:%S")
        soma = 0.0 
        qlinha1_valor = float(self.pagoLinha.text()) if self.pagoLinha.text() else 0.0
        qlinha2_valor = float(self.pagoLinha1.text()) if self.pagoLinha1.text() else 0.0
        qlinha3_valor =float(self.pagoLinhax.text()) if self.pagoLinhax.text() else 0.0
        total_valor = float(self.total.value()) if self.total.value() else 0.0 
        
        valor_cartao = self.pagoLinha.text()
        if not valor_cartao:  # Verifica se o texto está vazio
            valor_cartao = 0
        valor_dinheiro = self.pagoLinha1.text()
        if not valor_dinheiro:
            valor_dinheiro = 0
        valor_pix = self.pagoLinhax.text()
        if not valor_pix:
            valor_pix = 0
        troco_valor = qlinha3_valor + qlinha1_valor + qlinha2_valor - total_valor
        if not troco_valor:
            troco_valor = 0
        valor_dinheiro1 = float(valor_dinheiro) - float(troco_valor)


        
        for row in range(self.telaprodutos.rowCount()):
            valor_item = self.telaprodutos.item(row, 2)  # Assumindo que a coluna "valor" é a terceira coluna (índice 2)
            if valor_item is not None:
                valor = float(valor_item.text())
                soma += valor
                
                self.vendasdia.setItem(row, 3, QTableWidgetItem(valor_cartao))

        # Adicione os valores de self.qline2 à coluna "Dinheiro" (por exemplo, a coluna 4)
                self.vendasdia.setItem(row, 4, QTableWidgetItem(str(valor_dinheiro)))

        soma_str = str(soma) 
        insert_hora_total ="INSERT INTO {} (Hora,Total,Cartao,Dinheiro, Pix) VALUES (?,?,?,?,?)".format(nome_tabela) 
        cursor.execute(insert_hora_total, (data, soma_str,valor_cartao,valor_dinheiro, valor_pix ))
            
        
         # Adicione os valores de self.qline1 à coluna "Cartão" (por exemplo, a coluna 3)
                
        
        for row in range(self.telaprodutos.rowCount()):
            #odigo = self.telaprodutos.item(row, 0).text()
            nome = self.telaprodutos.item(row, 1).text()
            valor = float(self.telaprodutos.item(row, 2).text())

            # Insira cada produto na tabela "Vendas" individualmente
            insert_produto_valor = "INSERT INTO {} (Produto, Valor) VALUES (?, ?)".format(nome_tabela)
            cursor.execute(insert_produto_valor, (nome, valor))


        # Commit para salvar as alterações e fechar a conexão
        conn.commit()
        conn.close()
        #####################################Impresora#################################################
        #ser = serial.Serial('COM1', baudrate=9600, timeout=1)
        data_hoje = datetime.now()
        hora_atual = datetime.now().time()

        # Formatando a data para o formato desejado
        data_formatada_1 = data_hoje.strftime("%d/%m/%Y")
        # Crie um modelo de impressão vazio
        modelo_impressao = f"""
                        Lafirma
                    Volte Sempre!!!
                Feirão das malhas, Loja N O
        Data: {str(data_formatada_1)}  Hora:{hora_atual}

            ------------------------------------
    Código             Produto                     Valor

"""

        # Suponha que self.tableWidget seja o seu QTableWidget
        for row in range(self.telaprodutos.rowCount()):
            codigo = self.telaprodutos.item(row, 0).text()
            produto = self.telaprodutos.item(row, 1).text()
            valor = self.telaprodutos.item(row, 2).text()

            # Calcule o número de espaços necessários para alinhar os valores
            espacos_produto = " " * (18 - len(produto))
            espacos_valor = " " * (30 - len(valor))

            # Adicione dinamicamente cada linha de produto com espaços alinhados
            modelo_impressao += f"\n{codigo.ljust(10)} {produto.ljust(30)} {valor}"

        # Calcule o valor total (substitua com sua lógica real)
        total = 0.0
        for row in range(self.telaprodutos.rowCount()):
            valor = float(self.telaprodutos.item(row, 2).text())
            total += valor

        modelo_impressao += f"\n    ------------------------------ \n                   Total: R$ {total:.2f}"
 
        modelo_impressao += f"\n                Cartão: R$ {float(valor_cartao):.2f}"
        modelo_impressao += f"\n                Pix: R$ {float(valor_pix):.2f}"
        modelo_impressao += f"\n                Dinheiro: R$ {float(valor_dinheiro):.2f}"
        modelo_impressao += f"\n                Troco: R$ {float(troco_valor):.2f}"
        modelo_impressao += f"\n                Obrigado! Volte sempre!"
        modelo_impressao += f"\n  7 dias para troca!"



        # Comandos ESC/POS para imprimir o modelo
        comandos = [
            b'\x1B\x40',  # Inicializar a impressora
            b'\x1B\x61\x01',  # Centralizar o texto
            modelo_impressao.encode('utf-8'),
            b'\x1B\x61\x00',  # Alinhar o texto à esquerda
            b'\x0A',  # Avançar uma linha (pular)
            b'\x1D\x56\x01',  # Cortar o papel (parcial)
        ]

      
        impressora_padrao = win32print.GetDefaultPrinter()

        # Imprimir na impressora padrão
        hprinter = win32print.OpenPrinter(impressora_padrao)
        try:
            win32print.StartDocPrinter(hprinter, 1, ("Documento", None, "RAW"))
            win32print.StartPagePrinter(hprinter)
            win32print.WritePrinter(hprinter, modelo_impressao.encode('utf-8'))
            win32print.EndPagePrinter(hprinter)
            win32print.EndDocPrinter(hprinter)
        finally:
            win32print.ClosePrinter(hprinter)

                # Salvar o resultado em um arquivo TXT
            with open('resultado.txt', 'w', encoding='utf-8') as file:
                    file.write(modelo_impressao)

        import os
        os.system('notepad resultado.txt')


        ################################################################################################

        self.pagoLinha.clear()
        self.telaprodutos.clearContents()
        self.telaprodutos.setRowCount(0)
        self.telaprodutos.setColumnCount(0)
        self.quantidade.clear()
        self.pagoLinha1.clear()
        self.produto.clear()
        self.pagoLinhax.clear()
        self.codigo.clear()
 



        self.codigo.clear()
        self.quantidade.clear()
        self.pesquisaitens.clearContents()  # Limpa o conteúdo das células
        self.pesquisaitens.setRowCount(0) 
        self.loadData()



        self.vendas_dia()
        self.total.display(0)
        self.troco.display(0)
        self.codigo.setFocus()


    def cancelar_venda(self):
        self.total.display(0)
        self.troco.display(0)
        self.pagoLinha.clear()
        self.telaprodutos.setRowCount(0)  # Limpar todas as linhas
        self.telaprodutos.setColumnCount(0)  # Limpar todas as colunas
        self.total.display(0)
        self.pagoLinha1.clear()
        self.codigo.clear()
        self.codigo.setFocus()
        self.pix.display(0)
        self.troco.display(0)


    
    
    def vendas_dia(self):
        
        datedia = datetime.today().strftime("%d%m%Y")  # Por exemplo, "20231011" para 11 de outubro de 2023

        # Adicione um prefixo ao nome da tabela
        nome_tabela = f"vendas_{datedia}"
        # Verifique se a tabela já existe
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (nome_tabela,))
        tabela_existente = cursor.fetchone() is not None
        conn.close()  # Feche a conexão

        if not tabela_existente:
            # Se a tabela não existir, crie-a
            conn = sqlite3.connect("vendas.db")
            cursor = conn.cursor()
            
            cursor.execute(f'''CREATE TABLE {nome_tabela} (
                                Hora TEXT,
                                Produto TEXT,
                                Valor REAL,
                                Cartao REAL,
                                Pix REAL,
                                Dinheiro REAL,
                                Total REAL
                            )''')
            
            # Commit para salvar as alterações e fechar a conexão
            conn.commit()
            conn.close()
        
        
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        
        connection = sqlite3.connect('vendas.db')
        cursor = connection.cursor()

        # Selecione a tabela desejada (substitua 'Produtos' pelo nome correto da tabela)
        select_query = "SELECT * FROM {}".format(nome_tabela)
        cursor.execute(select_query)

        dados = cursor.fetchall()
        # Feche a conexão com o banco de dados
        connection.close()

        # Limpe o conteúdo da tabela existente
        self.vendasdia.setRowCount(0)

        # Defina o número de linhas na tabela
        num_linhas = len(dados)
        if num_linhas > 0:
            num_colunas = len(dados[0])
            self.vendasdia.setRowCount(num_linhas)
            self.vendasdia.setColumnCount(num_colunas)



        #valor_cartao = float(self.pagoLinha.text()) if self.pagoLinha.text() else "0.0"
        #valor_dinheiro = float(self.pagoLinha1.text()) if self.pagoLinha1.text() else "0.0"
                # Preencha a tabela com os dados
        for linha_idx, linha in enumerate(dados):
            for coluna_idx, valor in enumerate(linha):
                if valor is not None:
                    item = QTableWidgetItem(str(valor))
                    self.vendasdia.setItem(linha_idx, coluna_idx, item)
                else:
                    # Se o valor for None, crie um item em branco para essa célula
                    item = QTableWidgetItem("")
                    self.vendasdia.setItem(linha_idx, coluna_idx, item)
        self.vendasdia.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # Adicione os valores de self.qline1 à coluna "Cartão" (por exemplo, a coluna 3)
        #self.vendasdia.setItem(linha_idx, 3, QTableWidgetItem(valor_cartao))

# Adicione os valores de self.qline2 à coluna "Dinheiro" (por exemplo, a coluna 4)
        #self.vendasdia.setItem(linha_idx, 4, QTableWidgetItem(valor_dinheiro))

            # Defina os nomes das colunas
        colunas = [str(coluna[0]) for coluna in cursor.description]
        self.vendasdia.setHorizontalHeaderLabels(colunas)
        self.total_lcd()
        self.codigo.clear()



    def total_lcd(self):
        total = 0.0  # Inicializa o total como um número decimal

        # Percorre as linhas da tabela
        for row in range(self.vendasdia.rowCount()):
            item = self.vendasdia.item(row, 6)  # Assumindo que a coluna "Total" é a terceira coluna (índice 2)
            if item is not None and item.text():
                valor = float(item.text())
                total += valor  # Adiciona o valor à soma total

        # Define o valor do QLCDNumber com o total calculado
        self.totaldia.display(total)

    def adicionar_item_secundaria(self, item):
            produto = self.pesquisaitens.item(item.row(), 1).text()
            codigo = self.pesquisaitens.item(item.row(), 0).text()
            preco = self.pesquisaitens.item(item.row(), 3).text()

            # Obtenha a quantidade do QLineEdit de quantidade
            quantidade_texto = self.quantidade.text()
            quantidade = int(quantidade_texto) if quantidade_texto.isdigit() else 1

            # Verifica se o produto já está na tabela
            produto_existente = False
            for row in range(self.telaprodutos.rowCount()):
                item_codigo = self.telaprodutos.item(row, 0)
                item_produto = self.telaprodutos.item(row, 1)
                if item_produto.text() == "Desconto":
                    # Produto "Desconto" encontrado na tabela
                    produto_existente = True
                    # Somar a quantidade à quantidade existente na mesma linha
                    quantidade += float(self.telaprodutos.item(row, 2).text())
                    # Atualiza a quantidade na tabela
                    self.telaprodutos.setItem(row, 2, QTableWidgetItem(str(quantidade)))
                    break

            # Adiciona o produto na tabela com a nova quantidade e valor
            row_count = self.telaprodutos.rowCount()
            self.telaprodutos.insertRow(row_count)

            # Certifique-se de que self.telaprodutos tenha pelo menos 3 colunas
            if self.telaprodutos.columnCount() < 3:
                self.telaprodutos.setColumnCount(3)  # Defina o número de colunas para 3, se necessário
                self.telaprodutos.setHorizontalHeaderLabels(["Código", "Produto", "Valor"])  # Define os cabeçalhos das colunas

            # Adiciona o item na tabela
            self.telaprodutos.setItem(row_count, 0, QTableWidgetItem(codigo))
            self.telaprodutos.setItem(row_count, 1, QTableWidgetItem(produto))
            self.telaprodutos.setItem(row_count, 2, QTableWidgetItem(str(quantidade * float(preco))))
            self.telaprodutos.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

            # Calcula o valor total
            total = 0

            for row in range(self.telaprodutos.rowCount()):
                item = self.telaprodutos.item(row, 2)  # Coluna "Valor" (assumindo que seja a terceira coluna)
                if item is not None:
                    valor_texto = item.text()
                    try:
                        valor = float(valor_texto)
                        total += valor
                    except ValueError:
                        pass  # Ignora valores que não podem ser convertidos para float

            # Formata o valor total com um ponto decimal
                total_formatado = "{:.2f}".format(total)  # Exibe dois dígitos após o ponto decimal

                # Atualiza o QLCDNumber com o valor total formatado
                self.total.display(total_formatado)
                self.quantidade.clear()
                self.codigo.clear()
                self.produto.clear()
    def upload(self):
        # URL onde você fará o upload do arquivo
        url_upload = 'https://allldo.pythonanywhere.com/upload_db'

        # Nome do arquivo local que você deseja fazer o upload
        nome_arquivo_local = 'vendas.db'

        # Abra o arquivo local para leitura binária
        with open(nome_arquivo_local, 'rb') as arquivo:
            # Faça uma solicitação POST para o URL de upload, enviando o arquivo como um arquivo multipart
            response = requests.post(url_upload, files={'file': arquivo})

        # Verifique se a solicitação foi bem-sucedida (código de status HTTP 200)
        if response.status_code == 200:
            print("Arquivo de banco de dados enviado com sucesso.")
        else:
            # Imprima uma mensagem de erro se a solicitação falhar
            print("Erro ao fazer upload do arquivo:", response.status_code)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()


    sys.exit(app.exec_())


